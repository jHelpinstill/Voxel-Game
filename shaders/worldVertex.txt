#version 460 core

layout (location=0) in vec3 vertex_pos;
layout (location=1) in int instance_data;

layout (std430, binding=3) buffer chunks_ssbo
{
	int chunk_positions[];
};

//out vec2 tex_coord;
out vec3 fragment_color;
flat out int face;

uniform mat4 projection;
//uniform float unit_length;
uniform int chunk_size;

void main()
{
	ivec3 offseti, colori;
	offseti.x = instance_data & 63;
	offseti.y = (instance_data >> 6) & 63;
	offseti.z = (instance_data >> 12) & 63;

	int aface = (instance_data >> 18) & 7;

	colori.r = (instance_data >> 21) & 7;
	colori.g = (instance_data >> 24) & 7;
	colori.b = (instance_data >> 27) & 7;
	
	int chunk_data = chunk_positions[gl_DrawID];
	offseti.x += ((chunk_data & 1023) - 512) * chunk_size;
	offseti.y += (((chunk_data >> 10) & 1023) - 512) * chunk_size;
	offseti.z += (((chunk_data >> 20) & 1023) - 512) * chunk_size;
	
	vec3 offset = vec3(offseti);
	
	vec3 pos = vertex_pos;
	switch(aface)
	{
	case 0:
		break;
	case 1:
		pos.y++;
		pos.xz = pos.zx;
		break;
	case 2:
		pos.xy = pos.yx;
		pos.yz = pos.zy;
		break;
	case 3:
		pos.xy = pos.yx;
		pos.x++;
		break;
	case 4:
		pos.yz = pos.zy;
		pos.xy = pos.yx;
		break;
	case 5:
		pos.yz = pos.zy;
		pos.z++;
		break;
	}
	
	pos += offset;
	//pos *= unit_length;

	//vec2 tc = in_tex_coord;
	//if(tex_id == 1)
	//	tc.x += 0.5;

	gl_Position = projection * vec4(pos, 1.0);
	fragment_color = vec3(colori) / 7.0f;
	face = aface;
	//tex_coord = tc;
}